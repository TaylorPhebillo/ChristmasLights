#!/usr/bin/python3
import random
import board
import copy
import math
from random import random as rand
from random import randint
import neopixel
from time import sleep

light_positions = [
[896, 362],
[896, 362],
[896, 362],
[896, 362],
[896, 362],
[896, 362],
[896, 362],
[896, 362],
[1686, 337],
[896, 362],
[896, 362],
[896, 362],
[896, 362],
[896, 362],
[1519, 549],
[896, 362],
[896, 362],
[1453, 375],
[1549, 387],
[896, 362],
[1500, 373],
[1546, 296],
[1555, 247],
[1548, 200],
[1564, 152],
[896, 362],
[1592, 87],
[1593, 24],
[896, 362],
[896, 362],
[896, 362],
[896, 362],
[896, 362],
[896, 362],
[896, 362],
[896, 362],
[896, 362],
[896, 362],
[896, 362],
[896, 362],
[896, 362],
[896, 362],
[896, 362],
[896, 362],
[896, 362],
[896, 362],
[896, 362],
[1572, 1],
[1647, 221],
[896, 362],
[896, 362],
[1408, 140],
[896, 362],
[896, 362],
[896, 362],
[896, 362],
[1392, 356],
[1362, 397],
[896, 362],
[896, 362],
[896, 362],
[896, 362],
[896, 362],
[896, 362],
[896, 362],
[1252, 387],
[1236, 418],
[1318, 444],
[1320, 409],
[1314, 412],
[1322, 384],
[1369, 333],
[1384, 247],
[896, 362],
[896, 362],
[896, 362],
[1378, 363],
[1416, 280],
[896, 362],
[1451, 181],
[1399, 145],
[896, 362],
[1423, 170],
[1403, 305],
[1404, 207],
[1374, 172],
[1314, 105],
[1362, 36],
[1444, 72],
[1425, 31],
[896, 362],
[896, 362],
[896, 362],
[896, 362],
[896, 362],
[896, 362],
[896, 362],
[896, 362],
[896, 362],
[896, 362],
[896, 362],
[896, 362],
[896, 362],
[896, 362],
[896, 362],
[896, 362],
[896, 362],
[896, 362],
[896, 362],
[896, 362],
[896, 362],
[896, 362],
[896, 362],
[896, 362],
[896, 362],
[896, 362],
[896, 362],
[896, 362],
[896, 362],
[896, 362],
[896, 362],
[896, 362],
[896, 362],
[896, 362],
[896, 362],
[896, 362],
[896, 362],
[896, 362],
[896, 362],
[896, 362],
[896, 362],
[896, 362],
[896, 362],
[1262, 0],
[1282, 70],
[1285, 116],
[1361, 146],
[1334, 185],
[1382, 242],
[1414, 292],
[1363, 314],
[1352, 380],
[1327, 386],
[1356, 463],
[1324, 418],
[1348, 504],
[896, 362],
[1335, 523],
[896, 362],
[896, 362],
[896, 362],
[1216, 523],
[1243, 461],
[1247, 432],
[1226, 442],
[1198, 406],
[896, 362],
[1121, 292],
[1138, 299],
[1215, 262],
[1149, 317],
[1228, 267],
[1256, 190],
[1258, 138],
[1299, 105],
[1307, 61],
[896, 362],
[896, 362],
[896, 362],
[896, 362],
[896, 362],
[896, 362],
[896, 362],
[896, 362],
[896, 362],
[896, 362],
[896, 362],
[896, 362],
[896, 362],
[896, 362],
[896, 362],
[896, 362],
[896, 362],
[896, 362],
[896, 362],
[896, 362],
[896, 362],
[896, 362],
[896, 362],
[1187, 46],
[896, 362],
[1140, 127],
[1153, 203],
[896, 362],
[1093, 307],
[896, 362],
[896, 362],
[1189, 369],
[896, 362],
[896, 362],
[896, 362],

[896, 362],
[896, 362],
[896, 362],
[896, 362],
[896, 362],
[896, 362],
[1040, 352],
[896, 362],
[896, 362],
[896, 362],
[896, 362],
[974, 292],
[1014, 303],
[1042, 273],
[1046, 220],
[1029, 213],
[1031, 129],
[936, 80],
[896, 362],
[896, 362],
[896, 362],
[896, 362],
[896, 362],
[896, 362],
[896, 362],
[896, 362],
[896, 362],
[896, 362],
[896, 362],
[896, 362],
[896, 362],
[896, 362],
[896, 362],
[896, 362],
[896, 362],
[896, 362],
[896, 362],
[896, 362],
[896, 362],
[896, 362],
[896, 362],
[896, 362],
[909, 7],
[886, 63],
[896, 362],
[896, 362],
[909, 181],
[896, 362],
[952, 236],
[896, 362],
[907, 357],
[896, 362],
[896, 362],
[896, 362],
[896, 362],
[896, 362],
[905, 350],
[911, 267],
[888, 327],
[892, 281],
[820, 251],
[865, 181],
[867, 164],
[826, 102],
[810, 35],
[896, 362],
[896, 362],
[896, 362],
[896, 362],
[896, 362],
[896, 362],
[896, 362],
[896, 362],
[896, 362],
[896, 362],
[896, 362],
[896, 362],
[896, 362],
[896, 362],

[896, 362],
[896, 362],
[896, 362],
[896, 362],
[896, 362],
[766, 1],
[896, 362],
[789, 83],
[802, 160],
[757, 218],
[896, 362],
[755, 303],
[896, 362],
[896, 362],
[896, 362],
[896, 362],
[896, 362],
[896, 362],
[896, 362],
[896, 362],
[896, 362],
[896, 362],
[896, 362],
[717, 356],
[896, 362],
[676, 292],
[896, 362],
[896, 362],
[896, 362],
[896, 362],
[896, 362],
[896, 362],
[896, 362],
[896, 362],
[896, 362],
[896, 362],
[896, 362],
[896, 362],
[896, 362],
[896, 362],
[896, 362],
[896, 362],
[896, 362],
[896, 362],
[896, 362],
[896, 362],
[896, 362],
[896, 362],
[896, 362],
[896, 362],
[704, 43],
[605, 102],
[685, 161],
[896, 362],
[896, 362],
[896, 362],
[896, 362],
[699, 352],
[896, 362],
[896, 362],
[896, 362],
[896, 362],
[896, 362],
[896, 362],
[669, 277],
[624, 320],
[646, 275],
[636, 224],
[574, 230],
[896, 362],
[501, 60],
[586, 0],
[896, 362],
[896, 362],
[896, 362],
[896, 362],
[896, 362],
[896, 362],
[896, 362],
[896, 362],
[896, 362],
[896, 362],
[896, 362],
[896, 362],
[896, 362],
[528, 1],
[473, 47],
[896, 362],
[896, 362],
[425, 193],
[552, 262],
[538, 257],
[553, 311],
[896, 362],
[896, 362],
[896, 362],
[896, 362],
[477, 181],
[896, 362],
[896, 362],
[485, 232],
[433, 236],
[412, 153],
[896, 362],
[449, 62],
[418, 18],
[413, 1],
[896, 362],
[896, 362],
[896, 362],
[896, 362],
[896, 362],
[896, 362],
[896, 362],
[896, 362],
[466, 172],
[896, 362],
[896, 362],
[366, 294],
[397, 207],
[395, 96],
[396, 21],
[310, 0],
[276, 0],
[896, 362],
[896, 362],
[896, 362],
[335, 72],
[896, 362],
[896, 362],
[896, 362],
[896, 362],
[306, 21],
[896, 362],
[896, 362],
[896, 362],
[896, 362],
[896, 362],
[896, 362],
[896, 362],
[896, 362],
[308, 44],
[896, 362],
[896, 362],
[232, 127],
[263, 168],
[257, 227],
[336, 271],
[896, 362],
[391, 284],
[453, 280],
[479, 241],
[896, 362],
[896, 362],
[315, 213],
[319, 283],
[278, 284],
[254, 196],
[162, 213],
[896, 362],
[192, 112],
[188, 50],
[122, 24],
[896, 362],
[896, 362],
[896, 362],
[896, 362],
[896, 362],
[896, 362],
[896, 362],
[896, 362],
[896, 362],
[896, 362],
[896, 362],
[896, 362],
[896, 362],
[896, 362],
[896, 362],
[896, 362],

[896, 362],
[896, 362],
[896, 362],
[896, 362],
[896, 362],
[896, 362],
[896, 362],
[896, 362],
[896, 362],
[896, 362],
[896, 362],
[896, 362],
[1185, 1],
[896, 362],
[1207, 96],
[896, 362],
[1218, 166],
[1205, 215],
[1262, 275],
[1247, 339],
[1271, 350],
[896, 362],
[1235, 339],
[896, 362],
[896, 362],
[896, 362],
[896, 362],
[896, 362],
[896, 362],
[896, 362],
        [896, 362],
[896, 362],
[896, 362],
[856, 393],
[888, 326],
[862, 294],
[804, 288],
[896, 362],
[838, 192],
[889, 208],
[886, 202],]


x = list(list(zip(*light_positions))[0])
y = list(list(zip(*light_positions))[1])
for i in range(len(light_positions)):
    if x[i] == 896 and y[i] == 362:
        x[i] = int(rand() * (max(x)-min(x))) + min(x)
        y[i] = int(rand() * (max(y)-min(y))) + min(y)


x = [(p-min(x))/(max(x)-min(x)) for p in x]
y = [(p-min(y))/(max(y)-min(y)) for p in y]
zero = [(0,0,0)] * len(x)
pixels = neopixel.NeoPixel(board.D18, 500, brightness=0.3)
pixels.fill((0,0,0))
pixels.show()
pixels = neopixel.NeoPixel(board.D18, len(x), brightness=0.3)
pixels.fill((0,0,0))
pixels.show()
#from lightshow import color_bias
#while True:
#  pixels.fill(tuple(next(color_bias[i]) for i in range(3)))
#  sleep(0.8)
#  pixels.show()
pixels.show()
lights = list(zip(x, y))
from lightshow import controller
if __name__ == "__main__":
#    print(lights)
    c = controller(lights)
    while True:
        valid = False
        lights, color = next(c)
        random.shuffle(lights)
        if len(lights) > 1:
            continue
        for light in lights:
        #    print(f"Setting {light} to {color}")
            if pixels[light] != color:
                pixels[light] = color
                valid = True
        if not valid:
            continue
        pixels.show()
#    lights_s = list(sorted(copy.copy(lights), key = f rand() < 0.5 else False))

#    for i in range(len(lights_s)):
#        yield (lights_s[i][0], color)

#def ongoing_transitions(lights):
#    trans = [transition(list(lights)) for _ in range(2)]
#    i = 0
#    while True:
#        if rand() < (next(drawdown)/len(lights)) or len(trans) == 0:
#            trans.append(transition(list(lights)))
#        try:
#            yield (next(trans[i]), len(trans))
#        except StopIteration:
#            trans.pop(i)
#        i += 1
#        if i >= len(trans):
#            i = 0
#
#while True:
#    x_r = rand() - 0.5
#    y_r = rand() - 0.5
#    ong = ongoing_transitions(lights)
#    for (i, color), num_trans in ong:
#            l_no = lights[i][0]
#            lights[i] = (lights[i][0], lights[i][1], lights[i][2],tuple(color))
#            pixels[l_no] = color
#            pixels.show()
#            sleep(next(speed)/num_trans)

